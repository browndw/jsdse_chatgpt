{"title":"Student Writing and Expertise in the Age of AI","markdown":{"yaml":{"title":"Student Writing and Expertise in the Age of AI","author":"David Brown & Alex Reinhart","format":{"html":{"number-sections":true}}},"headingText":"Background & data","containsRefs":false,"markdown":"\n\n\nThis notebook includes the code and data that were used to produce the results of our study, which was submitted to the Journal of Statistics and Data Science Education.\n\nNote that the complete raw text data is not being made available to protect the privacy of the student writers. However, samples from the published and ChatGPT-generated data are included in order to demonstrate the processing pipeline.\n\n## Load packages\n\n```{r message=F, warning=F}\nlibrary(tidyverse)\nlibrary(gt)\n```\n\n## Load data\n\n```{r warning=FALSE, message=FALSE}\nload(\"data/chatgpt_data.rda\")\n```\n\n## Create a composition table\n\n```{r}\ncorpus_comp <- stats_freq %>% \n  pivot_longer(cols = AF_chatgpt:AF_student, names_to = \"Author_Type\", values_to = \"AF\") %>%\n  group_by(Author_Type) %>%\n  summarize(Texts = 100,\n            Tokens = sum(AF)) %>%\n  mutate(Author_Type = c(\"ChatGPT\", \"Published\", \"Student\"))\n```\n\nSay stuff...\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-corpus\n#| tbl-cap: \"Composition of corpus.\"\n\ncorpus_comp |> \n  gt() |>\n  fmt_integer() |>\n  cols_label(\n    Author_Type = md(\"**Author Type**\"),\n    Texts = md(\"**Texts**\"),\n    Tokens = md(\"**Tokens**\")\n  ) |>\n  grand_summary_rows(\n    columns = c(Texts, Tokens),\n    fns = list(\n      Total ~ sum(.)\n    ) ,\n    fmt = ~ fmt_integer(.)\n    )\n```\n\n# Linear discriminant analysis (LDA)\n\nSay stuff....\n\n```{r message=F, warning=FALSE}\n# Scale variables\nbiber_scaled <- stats_biber %>%\n  select(-doc_id) %>%\n  mutate_if(is.numeric, scale)\n  \nstats_lda <- MASS::lda(Group ~ ., biber_scaled)\n```\n\nFunction for plotting...\n\n```{r message=F, warning=FALSE}\nlda_scatter <- function(lda){\n  \n  var_ex <- (lda$svd)^2/sum(lda$svd^2) * 100\n  \n  per_ex_1 <- paste0(\"(\", round(var_ex[1], 2), \"%)\")\n  per_ex_2 <- paste0(\"(\", round(var_ex[2], 2), \"%)\")\n  \n  scores <- predict(lda) %>%\n    data.frame() %>%\n    select(class, x.LD1, x.LD2)\n  \n  max_x <- scores[,2] %>% abs() %>% max() %>% ceiling()+.5\n  max_y <- scores[,3] %>% abs() %>% max() %>% ceiling()+.5\n  \n  p1 <- ggplot() +\n    geom_hline(yintercept = 0, linewidth = .25) +\n    geom_vline(xintercept = 0, linewidth = .25) +\n    geom_point(data = scores, aes(x = x.LD1, y = x.LD2, fill = class),\n               shape = 21, size = 1.5) +\n    viridis::scale_fill_viridis(discrete = T) +\n    xlab(paste0(\"LD1\", \" \", per_ex_1)) +\n    ylab(paste0(\"LD2\", \" \", per_ex_2)) +\n    ylim(-max_y, max_y) +\n    xlim(-max_x, max_x) +\n    theme_linedraw() +\n    theme(panel.grid.minor.x = element_blank()) +\n    theme(panel.grid.minor.y = element_blank()) +\n    theme(panel.grid.major.x = element_blank()) +\n    theme(panel.grid.major.y = element_blank()) +\n    theme(legend.position = \"none\")\n  return(p1)\n}\n```\n\n```{r echo=F}\n#| label: fig-lda\n#| fig-cap: \"Caption describing plot.\"\n\np1 <- lda_scatter(stats_lda)\n\np1 +\n  annotate(\"text\", x = -9.25, y = 6, label = \"↑\\nNovice\", size = 3.5) +\n  annotate(\"text\", x = 8, y = 6, label = \"Human-generated →\", size = 3.5) +\n  annotate(\"text\", x = 9.25, y = -6, label = \"Expert\\n↓\", size = 3.5) +\n  annotate(\"text\", x = -8, y = -6, label = \"← Machine-generated\", size = 3.5) +\n  annotate(\"text\", x = 6, y = 3.75, label = \"Student\", size = 3.5) +\n  annotate(\"text\", x = 6, y = -3.75, label = \"Expert\", size = 3.5) +\n  annotate(\"text\", x = -6, y = -2.5, label = \"ChatGPT\", size = 3.5)\n```\n\n# Multiple univariate regression\n\nSay stuff...\n\n```{r message=F, warning=FALSE}\nz_means <- stats_biber %>%\n  select(-doc_id) %>%\n  mutate_if(is.numeric, scale) %>%\n  pivot_longer(!Group, names_to = \"variable\", values_to = \"z_score\") %>%\n  group_by(Group, variable) %>%\n  summarize(mean_z = mean(z_score)) %>%\n  pivot_wider(names_from = Group, values_from = mean_z)\n\nlm_biber <- stats_biber %>%\n  select(-doc_id) %>%\n  pivot_longer(!Group, names_to = \"variable\", values_to = \"value\") %>%\n  group_by(variable) %>%\n  arrange(.by_group = TRUE) %>% \n  nest() %>%\n  mutate(models = map(data, ~ lm(value ~ Group, data = .)),\n         glance = map(models, broom::glance)) %>%\n  unnest(glance) %>%\n  select(-c(data, models)) %>%\n  left_join(z_means) %>%\n  select(variable, ChatGPT:Student, everything())\n```\n\n```{r message=FALSE}\nld1_tbl <- lm_biber %>%\n  select(ChatGPT:r.squared, p.value) %>%\n  mutate(direction = ifelse(ChatGPT > 0 & Published < 0 & Student <0, \"machine\", NA)) %>%\n  mutate(direction = ifelse(ChatGPT < 0 & Published > 0 & Student > 0, \"human\", direction)) %>%\n  filter(!is.na(direction)) %>%\n  filter(r.squared > 0.1) %>%\n  arrange(direction, -r.squared)\n\nld2_tbl <- lm_biber %>%\n  select(ChatGPT:r.squared, p.value) %>%\n  mutate(direction = ifelse(Published > 0 & ChatGPT < 0 & Student <0, \"expert\", NA)) %>%\n  mutate(direction = ifelse(Student > 0 & ChatGPT < 0 & Published < 0, \"novice\", direction)) %>%\n  filter(!is.na(direction)) %>%\n  filter(r.squared > 0.1) %>%\n  arrange(desc(direction), -r.squared)\n```\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-ld1\n#| tbl-cap: \"Caption describing table.\"\n\nld1_tbl |> \n  mutate(direction = paste0(\"Features indicating \", direction, \"-generated writing\")) |>\n  mutate(variable = str_remove(variable, \"f_\\\\d+_\")) |>\n  mutate(variable = str_replace_all(variable, \"_\", \" \")) |>\n  gt(groupname_col = 'direction') |>\n  cols_label(\n    variable = md(\"\"),\n    ChatGPT = md(\"**ChatGPT<br>n:100**\"),\n    Published = md(\"**Published<br>n:100**\"),\n    Student = md(\"**Student<br>n:100**\"),\n    r.squared = md(\"***R*^2^**\"),\n    p.value = md(\"***p*-value**\")\n  ) |> \n  fmt_number(\n    columns = everything(),\n    decimals = 2\n  )  |> \n  data_color(\n    columns = c(ChatGPT:Student),\n    colors = scales::col_numeric(\n      palette = c(\n        \"#FF6666\", \"white\", \"#336699\"),\n      domain = c(pmin(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student), \n                 0, \n                 pmax(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student)))\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\",\n                align = \"right\")\n      ),\n    locations = cells_body(\n      columns = variable,\n    )\n  )\n```\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-ld2\n#| tbl-cap: \"Caption describing table.\"\n\nld2_tbl |> \n  mutate(direction = paste0(\"Features indicating \", direction, \" writing\")) |>\n  mutate(variable = str_remove(variable, \"f_\\\\d+_\")) |>\n  mutate(variable = str_replace_all(variable, \"_\", \" \")) |>\n  gt(groupname_col = 'direction') |>\n  cols_label(\n    variable = md(\"\"),\n    ChatGPT = md(\"**ChatGPT<br>n:100**\"),\n    Published = md(\"**Published<br>n:100**\"),\n    Student = md(\"**Student<br>n:100**\"),\n    r.squared = md(\"***R*^2^**\"),\n    p.value = md(\"***p*-value**\")\n  ) |> \n  fmt_number(\n    columns = everything(),\n    decimals = 2\n  )  |> \n  data_color(\n    columns = c(ChatGPT:Student),\n    colors = scales::col_numeric(\n      palette = c(\n        \"#FF6666\", \"white\", \"#336699\"),\n      domain = c(-1, 0, 1))\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\",\n                align = \"right\")\n      ),\n    locations = cells_body(\n      columns = variable,\n    )\n  )\n```\n\n# Modal verb frequencies\n\nSay stuff...\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-modals\n#| tbl-cap: \"Caption describing table.\"\n\nstats_freq |> \n  filter(tag == \"md\") |>\n  select(-tag) |>\n  mutate(modal_type = ifelse(str_detect(token, \"will|would|'ll\"), \"Prediction\", NA)) |>\n  mutate(modal_type = ifelse(str_detect(token, \"can|may|could|might\"), \"Possiblity\", modal_type)) |>\n  mutate(modal_type = ifelse(is.na(modal_type), \"Necessity\", modal_type)) |>\n  gt(groupname_col = 'modal_type') |>\n  cols_label(\n    token = md(\"Modal verb\"),\n    AF_chatgpt = md(\"ChatGPT\"),\n    AF_published = md(\"Published\"),\n    AF_student = md(\"Student\"),\n    RF_chatgpt = md(\"ChatGPT\"),\n    RF_published = md(\"Published\"),\n    RF_student = md(\"Student\"),\n  ) |> \n  tab_spanner(\n    label = \"Absolute Frequency\",\n    columns = c(AF_chatgpt, AF_published, AF_student)\n  ) |>\n  tab_spanner(\n    label = md(\"Relative Frequency (per 10^5^ words)\"),\n    columns = c(RF_chatgpt, RF_published, RF_student)\n  ) |>\n  fmt_number(\n    columns = c(RF_chatgpt, RF_published, RF_student),\n    decimals = 2\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\",\n                align = \"right\")\n      ),\n    locations = cells_body(\n      columns = token,\n    )\n  )\n```\n\n# Noun phrases\n\nSay stuff...\n\n```{r}\ncount_pre <- function(np, root){\n  np_vector <- stringi::stri_extract_all_words(np) %>% unlist()\n  n_pre <- match(root, np_vector) - 1\n  n_pre <- unlist(unname(n_pre))\n  return(n_pre)\n}\n\ncount_post <- function(np, root){\n  np_vector <- stringi::stri_extract_all_words(np) %>% unlist()\n  n_post <- length(np_vector) - match(root, np_vector)\n  n_post <- unlist(unname(n_post))\n  return(n_post)\n}\n```\n\n```{r warning=F, message=F}\npre_counts <- stats_nps %>%\n  group_by(author_type, pre_nom) %>%\n  summarize(count = n()) %>%\n  ungroup() %>%\n  group_by(author_type) %>%\n  mutate(proportion = count/sum(count) * 100) %>%\n  arrange(-proportion)\n\npost_counts <- stats_nps %>%\n  group_by(author_type, post_nom) %>%\n  summarize(count = n()) %>%\n  ungroup() %>%\n  group_by(author_type) %>%\n  mutate(proportion = count/sum(count) * 100) %>%\n  arrange(-proportion)\n\n```\n\nWe actually don't have these in the study, but they're interesting?\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-prenominal\n#| tbl-cap: \"Caption describing table.\"\n\npre_counts |> \n  pivot_wider(\n    names_from = author_type,\n    values_from = c(count, proportion),\n    values_fill = 0\n  ) |>\n  gt() |>\n  cols_label(\n    pre_nom = md(\"Pre-nominal POS\"),\n    count_chatgpt = md(\"ChatGPT\"),\n    count_published = md(\"Published\"),\n    count_student = md(\"Student\"),\n    proportion_chatgpt = md(\"ChatGPT\"),\n    proportion_published = md(\"Published\"),\n    proportion_student = md(\"Student\"),\n  ) |> \n  tab_spanner(\n    label = \"Absolute Frequency\",\n    columns = c(count_chatgpt, count_published, count_student)\n  ) |>\n  tab_spanner(\n    label = md(\"Relative Frequency (per 10^2^ words)\"),\n    columns = c(proportion_chatgpt, proportion_published, proportion_student)\n  ) |>\n  fmt_number(\n    columns = c(proportion_chatgpt, proportion_published, proportion_student),\n    decimals = 2\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(align = \"right\")\n      ),\n    locations = cells_body(\n      columns = pre_nom,\n    )\n  )\n```\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-postnominal\n#| tbl-cap: \"Caption describing table.\"\n\npost_counts |> \n  pivot_wider(\n    names_from = author_type,\n    values_from = c(count, proportion),\n    values_fill = 0\n  ) |>\n  gt() |>\n  cols_label(\n    post_nom = md(\"Post-nominal POS\"),\n    count_chatgpt = md(\"ChatGPT\"),\n    count_published = md(\"Published\"),\n    count_student = md(\"Student\"),\n    proportion_chatgpt = md(\"ChatGPT\"),\n    proportion_published = md(\"Published\"),\n    proportion_student = md(\"Student\"),\n  ) |> \n  tab_spanner(\n    label = \"Absolute Frequency\",\n    columns = c(count_chatgpt, count_published, count_student)\n  ) |>\n  tab_spanner(\n    label = md(\"Relative Frequency (per 10^2^ words)\"),\n    columns = c(proportion_chatgpt, proportion_published, proportion_student)\n  ) |>\n  fmt_number(\n    columns = c(proportion_chatgpt, proportion_published, proportion_student),\n    decimals = 2\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(align = \"right\")\n      ),\n    locations = cells_body(\n      columns = post_nom,\n    )\n  )\n```\n\n```{r warning=F, message=F}\ndf_plot <- stats_nps  %>% \n  filter(!is.na(n_pre) | !is.na(n_post)) %>%\n  group_by(author_type) %>%\n  summarize(np_len = mean(np_len),\n            pre_root = mean(n_pre),\n            post_root = mean(n_post)) %>%\n  mutate(author_type = c(\"ChatGPT\", \"Published\", \"Student\"))\n\ndf_plot <- within(df_plot, author_type <- factor(author_type, levels = c('Student', 'ChatGPT', 'Published')))\n\n```\n\n## Build plot\n\n```{r}\ntext_center <- grid::textGrob(\"Root noun\", gp= grid::gpar(fontsize=10, fontface=\"bold\"))\ntext_left <- grid::textGrob(\"Pre-nominal\", gp= grid::gpar(fontsize=10, fontface=\"bold\"))\ntext_right <- grid::textGrob(\"Post-nominal\", gp= grid::gpar(fontsize=10, fontface=\"bold\"))\n\ng.mid <- ggplot(df_plot, aes(x=1, y=author_type)) + \n  geom_text(aes(label = paste0(\"- \", author_type, \" -\")), lineheight = 1) +\n  ggtitle(\"\") +\n  ylab(NULL) +\n  annotation_custom(text_center, xmin=1, xmax=1, ymin=-0.5, ymax=1.5) +\n  coord_cartesian(clip = \"off\") + \n  theme(axis.title=element_blank(),\n        panel.grid=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank(),\n        panel.background=element_blank(),\n        axis.text.x=element_text(color=NA),\n        axis.ticks.x=element_line(color=NA),\n        plot.margin = unit(c(1, -1, 1.25, -1), \"lines\"))\n\ng1 <- ggplot(data = df_plot, aes(x = author_type, y = pre_root, fill = author_type)) +\n  geom_col(width = 0.5) + ggtitle(\"\") +\n  scale_fill_manual(values = c(\n    \"Published\" = viridis::viridis(3)[2], \n    \"ChatGPT\"   = viridis::viridis(3)[1], \n    \"Student\"   = viridis::viridis(3)[3])\n    ) +\n  geom_text(\n    aes(y = .55, label = paste0(\"← \", round(pre_root, 2), \" words\")),\n    nudge_x = .5\n  ) +\n  theme(axis.title.x = element_blank(), \n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(), \n        axis.ticks.y = element_blank(), \n        axis.text.x = element_blank(), \n        legend.position = \"none\",\n        axis.ticks.x = element_blank(), \n        panel.background = element_blank(),\n        plot.margin = unit(c(1, -1, 2, 0), \"lines\")) +\n  annotation_custom(text_left, xmin=-0.5, xmax=1.5, ymin=-0.5, ymax=-0.5) +\n  scale_y_reverse() + \n  coord_flip()\n\ng2 <- ggplot(data = df_plot, aes(x = author_type, y = post_root, fill = author_type)) +\n  xlab(NULL) +\n  geom_col(width = 0.5) + ggtitle(\"\") +\n  scale_fill_manual(values = c(\n    \"Published\" = viridis::viridis(3)[2], \n    \"ChatGPT\"   = viridis::viridis(3)[1], \n    \"Student\"   = viridis::viridis(3)[3])\n  ) +\n  geom_text(\n    aes(y = .5, label = paste0(round(post_root, 2), \" words →\")),\n    nudge_x = .5\n  ) +\n  theme(axis.title.x = element_blank(), \n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(), \n        axis.ticks.y = element_blank(),\n        axis.text.x = element_blank(), \n        axis.ticks.x = element_blank(), \n        legend.position = \"none\",\n        panel.background = element_blank(),\n        plot.margin = unit(c(1, 0, 2, -1), \"lines\")) +\n  annotation_custom(text_right, xmin=-0.5, xmax=1.5, ymin=0.5, ymax=0.5) +\n  coord_flip()\n\n\ngg1 <- ggplot_gtable(ggplot_build(g1))\ngg2 <- ggplot_gtable(ggplot_build(g2))\ngg.mid <- ggplot_gtable(ggplot_build(g.mid))\n```\n\n## Plot\n\n```{r echo=F, warning=F, message=F}\n#| label: fig-nps\n#| fig-cap: \"Caption describing plot.\"\n#| fig-height: 3\n\ngridExtra::grid.arrange(gg1, gg.mid, gg2, ncol=3, widths=c(2.2/10, 1.7/10, 6.1/10))\n```\n","srcMarkdownNoYaml":"\n\n# Background & data\n\nThis notebook includes the code and data that were used to produce the results of our study, which was submitted to the Journal of Statistics and Data Science Education.\n\nNote that the complete raw text data is not being made available to protect the privacy of the student writers. However, samples from the published and ChatGPT-generated data are included in order to demonstrate the processing pipeline.\n\n## Load packages\n\n```{r message=F, warning=F}\nlibrary(tidyverse)\nlibrary(gt)\n```\n\n## Load data\n\n```{r warning=FALSE, message=FALSE}\nload(\"data/chatgpt_data.rda\")\n```\n\n## Create a composition table\n\n```{r}\ncorpus_comp <- stats_freq %>% \n  pivot_longer(cols = AF_chatgpt:AF_student, names_to = \"Author_Type\", values_to = \"AF\") %>%\n  group_by(Author_Type) %>%\n  summarize(Texts = 100,\n            Tokens = sum(AF)) %>%\n  mutate(Author_Type = c(\"ChatGPT\", \"Published\", \"Student\"))\n```\n\nSay stuff...\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-corpus\n#| tbl-cap: \"Composition of corpus.\"\n\ncorpus_comp |> \n  gt() |>\n  fmt_integer() |>\n  cols_label(\n    Author_Type = md(\"**Author Type**\"),\n    Texts = md(\"**Texts**\"),\n    Tokens = md(\"**Tokens**\")\n  ) |>\n  grand_summary_rows(\n    columns = c(Texts, Tokens),\n    fns = list(\n      Total ~ sum(.)\n    ) ,\n    fmt = ~ fmt_integer(.)\n    )\n```\n\n# Linear discriminant analysis (LDA)\n\nSay stuff....\n\n```{r message=F, warning=FALSE}\n# Scale variables\nbiber_scaled <- stats_biber %>%\n  select(-doc_id) %>%\n  mutate_if(is.numeric, scale)\n  \nstats_lda <- MASS::lda(Group ~ ., biber_scaled)\n```\n\nFunction for plotting...\n\n```{r message=F, warning=FALSE}\nlda_scatter <- function(lda){\n  \n  var_ex <- (lda$svd)^2/sum(lda$svd^2) * 100\n  \n  per_ex_1 <- paste0(\"(\", round(var_ex[1], 2), \"%)\")\n  per_ex_2 <- paste0(\"(\", round(var_ex[2], 2), \"%)\")\n  \n  scores <- predict(lda) %>%\n    data.frame() %>%\n    select(class, x.LD1, x.LD2)\n  \n  max_x <- scores[,2] %>% abs() %>% max() %>% ceiling()+.5\n  max_y <- scores[,3] %>% abs() %>% max() %>% ceiling()+.5\n  \n  p1 <- ggplot() +\n    geom_hline(yintercept = 0, linewidth = .25) +\n    geom_vline(xintercept = 0, linewidth = .25) +\n    geom_point(data = scores, aes(x = x.LD1, y = x.LD2, fill = class),\n               shape = 21, size = 1.5) +\n    viridis::scale_fill_viridis(discrete = T) +\n    xlab(paste0(\"LD1\", \" \", per_ex_1)) +\n    ylab(paste0(\"LD2\", \" \", per_ex_2)) +\n    ylim(-max_y, max_y) +\n    xlim(-max_x, max_x) +\n    theme_linedraw() +\n    theme(panel.grid.minor.x = element_blank()) +\n    theme(panel.grid.minor.y = element_blank()) +\n    theme(panel.grid.major.x = element_blank()) +\n    theme(panel.grid.major.y = element_blank()) +\n    theme(legend.position = \"none\")\n  return(p1)\n}\n```\n\n```{r echo=F}\n#| label: fig-lda\n#| fig-cap: \"Caption describing plot.\"\n\np1 <- lda_scatter(stats_lda)\n\np1 +\n  annotate(\"text\", x = -9.25, y = 6, label = \"↑\\nNovice\", size = 3.5) +\n  annotate(\"text\", x = 8, y = 6, label = \"Human-generated →\", size = 3.5) +\n  annotate(\"text\", x = 9.25, y = -6, label = \"Expert\\n↓\", size = 3.5) +\n  annotate(\"text\", x = -8, y = -6, label = \"← Machine-generated\", size = 3.5) +\n  annotate(\"text\", x = 6, y = 3.75, label = \"Student\", size = 3.5) +\n  annotate(\"text\", x = 6, y = -3.75, label = \"Expert\", size = 3.5) +\n  annotate(\"text\", x = -6, y = -2.5, label = \"ChatGPT\", size = 3.5)\n```\n\n# Multiple univariate regression\n\nSay stuff...\n\n```{r message=F, warning=FALSE}\nz_means <- stats_biber %>%\n  select(-doc_id) %>%\n  mutate_if(is.numeric, scale) %>%\n  pivot_longer(!Group, names_to = \"variable\", values_to = \"z_score\") %>%\n  group_by(Group, variable) %>%\n  summarize(mean_z = mean(z_score)) %>%\n  pivot_wider(names_from = Group, values_from = mean_z)\n\nlm_biber <- stats_biber %>%\n  select(-doc_id) %>%\n  pivot_longer(!Group, names_to = \"variable\", values_to = \"value\") %>%\n  group_by(variable) %>%\n  arrange(.by_group = TRUE) %>% \n  nest() %>%\n  mutate(models = map(data, ~ lm(value ~ Group, data = .)),\n         glance = map(models, broom::glance)) %>%\n  unnest(glance) %>%\n  select(-c(data, models)) %>%\n  left_join(z_means) %>%\n  select(variable, ChatGPT:Student, everything())\n```\n\n```{r message=FALSE}\nld1_tbl <- lm_biber %>%\n  select(ChatGPT:r.squared, p.value) %>%\n  mutate(direction = ifelse(ChatGPT > 0 & Published < 0 & Student <0, \"machine\", NA)) %>%\n  mutate(direction = ifelse(ChatGPT < 0 & Published > 0 & Student > 0, \"human\", direction)) %>%\n  filter(!is.na(direction)) %>%\n  filter(r.squared > 0.1) %>%\n  arrange(direction, -r.squared)\n\nld2_tbl <- lm_biber %>%\n  select(ChatGPT:r.squared, p.value) %>%\n  mutate(direction = ifelse(Published > 0 & ChatGPT < 0 & Student <0, \"expert\", NA)) %>%\n  mutate(direction = ifelse(Student > 0 & ChatGPT < 0 & Published < 0, \"novice\", direction)) %>%\n  filter(!is.na(direction)) %>%\n  filter(r.squared > 0.1) %>%\n  arrange(desc(direction), -r.squared)\n```\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-ld1\n#| tbl-cap: \"Caption describing table.\"\n\nld1_tbl |> \n  mutate(direction = paste0(\"Features indicating \", direction, \"-generated writing\")) |>\n  mutate(variable = str_remove(variable, \"f_\\\\d+_\")) |>\n  mutate(variable = str_replace_all(variable, \"_\", \" \")) |>\n  gt(groupname_col = 'direction') |>\n  cols_label(\n    variable = md(\"\"),\n    ChatGPT = md(\"**ChatGPT<br>n:100**\"),\n    Published = md(\"**Published<br>n:100**\"),\n    Student = md(\"**Student<br>n:100**\"),\n    r.squared = md(\"***R*^2^**\"),\n    p.value = md(\"***p*-value**\")\n  ) |> \n  fmt_number(\n    columns = everything(),\n    decimals = 2\n  )  |> \n  data_color(\n    columns = c(ChatGPT:Student),\n    colors = scales::col_numeric(\n      palette = c(\n        \"#FF6666\", \"white\", \"#336699\"),\n      domain = c(pmin(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student), \n                 0, \n                 pmax(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student)))\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\",\n                align = \"right\")\n      ),\n    locations = cells_body(\n      columns = variable,\n    )\n  )\n```\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-ld2\n#| tbl-cap: \"Caption describing table.\"\n\nld2_tbl |> \n  mutate(direction = paste0(\"Features indicating \", direction, \" writing\")) |>\n  mutate(variable = str_remove(variable, \"f_\\\\d+_\")) |>\n  mutate(variable = str_replace_all(variable, \"_\", \" \")) |>\n  gt(groupname_col = 'direction') |>\n  cols_label(\n    variable = md(\"\"),\n    ChatGPT = md(\"**ChatGPT<br>n:100**\"),\n    Published = md(\"**Published<br>n:100**\"),\n    Student = md(\"**Student<br>n:100**\"),\n    r.squared = md(\"***R*^2^**\"),\n    p.value = md(\"***p*-value**\")\n  ) |> \n  fmt_number(\n    columns = everything(),\n    decimals = 2\n  )  |> \n  data_color(\n    columns = c(ChatGPT:Student),\n    colors = scales::col_numeric(\n      palette = c(\n        \"#FF6666\", \"white\", \"#336699\"),\n      domain = c(-1, 0, 1))\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\",\n                align = \"right\")\n      ),\n    locations = cells_body(\n      columns = variable,\n    )\n  )\n```\n\n# Modal verb frequencies\n\nSay stuff...\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-modals\n#| tbl-cap: \"Caption describing table.\"\n\nstats_freq |> \n  filter(tag == \"md\") |>\n  select(-tag) |>\n  mutate(modal_type = ifelse(str_detect(token, \"will|would|'ll\"), \"Prediction\", NA)) |>\n  mutate(modal_type = ifelse(str_detect(token, \"can|may|could|might\"), \"Possiblity\", modal_type)) |>\n  mutate(modal_type = ifelse(is.na(modal_type), \"Necessity\", modal_type)) |>\n  gt(groupname_col = 'modal_type') |>\n  cols_label(\n    token = md(\"Modal verb\"),\n    AF_chatgpt = md(\"ChatGPT\"),\n    AF_published = md(\"Published\"),\n    AF_student = md(\"Student\"),\n    RF_chatgpt = md(\"ChatGPT\"),\n    RF_published = md(\"Published\"),\n    RF_student = md(\"Student\"),\n  ) |> \n  tab_spanner(\n    label = \"Absolute Frequency\",\n    columns = c(AF_chatgpt, AF_published, AF_student)\n  ) |>\n  tab_spanner(\n    label = md(\"Relative Frequency (per 10^5^ words)\"),\n    columns = c(RF_chatgpt, RF_published, RF_student)\n  ) |>\n  fmt_number(\n    columns = c(RF_chatgpt, RF_published, RF_student),\n    decimals = 2\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\",\n                align = \"right\")\n      ),\n    locations = cells_body(\n      columns = token,\n    )\n  )\n```\n\n# Noun phrases\n\nSay stuff...\n\n```{r}\ncount_pre <- function(np, root){\n  np_vector <- stringi::stri_extract_all_words(np) %>% unlist()\n  n_pre <- match(root, np_vector) - 1\n  n_pre <- unlist(unname(n_pre))\n  return(n_pre)\n}\n\ncount_post <- function(np, root){\n  np_vector <- stringi::stri_extract_all_words(np) %>% unlist()\n  n_post <- length(np_vector) - match(root, np_vector)\n  n_post <- unlist(unname(n_post))\n  return(n_post)\n}\n```\n\n```{r warning=F, message=F}\npre_counts <- stats_nps %>%\n  group_by(author_type, pre_nom) %>%\n  summarize(count = n()) %>%\n  ungroup() %>%\n  group_by(author_type) %>%\n  mutate(proportion = count/sum(count) * 100) %>%\n  arrange(-proportion)\n\npost_counts <- stats_nps %>%\n  group_by(author_type, post_nom) %>%\n  summarize(count = n()) %>%\n  ungroup() %>%\n  group_by(author_type) %>%\n  mutate(proportion = count/sum(count) * 100) %>%\n  arrange(-proportion)\n\n```\n\nWe actually don't have these in the study, but they're interesting?\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-prenominal\n#| tbl-cap: \"Caption describing table.\"\n\npre_counts |> \n  pivot_wider(\n    names_from = author_type,\n    values_from = c(count, proportion),\n    values_fill = 0\n  ) |>\n  gt() |>\n  cols_label(\n    pre_nom = md(\"Pre-nominal POS\"),\n    count_chatgpt = md(\"ChatGPT\"),\n    count_published = md(\"Published\"),\n    count_student = md(\"Student\"),\n    proportion_chatgpt = md(\"ChatGPT\"),\n    proportion_published = md(\"Published\"),\n    proportion_student = md(\"Student\"),\n  ) |> \n  tab_spanner(\n    label = \"Absolute Frequency\",\n    columns = c(count_chatgpt, count_published, count_student)\n  ) |>\n  tab_spanner(\n    label = md(\"Relative Frequency (per 10^2^ words)\"),\n    columns = c(proportion_chatgpt, proportion_published, proportion_student)\n  ) |>\n  fmt_number(\n    columns = c(proportion_chatgpt, proportion_published, proportion_student),\n    decimals = 2\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(align = \"right\")\n      ),\n    locations = cells_body(\n      columns = pre_nom,\n    )\n  )\n```\n\n```{r echo=F, warning=F, message=F}\n#| label: tbl-postnominal\n#| tbl-cap: \"Caption describing table.\"\n\npost_counts |> \n  pivot_wider(\n    names_from = author_type,\n    values_from = c(count, proportion),\n    values_fill = 0\n  ) |>\n  gt() |>\n  cols_label(\n    post_nom = md(\"Post-nominal POS\"),\n    count_chatgpt = md(\"ChatGPT\"),\n    count_published = md(\"Published\"),\n    count_student = md(\"Student\"),\n    proportion_chatgpt = md(\"ChatGPT\"),\n    proportion_published = md(\"Published\"),\n    proportion_student = md(\"Student\"),\n  ) |> \n  tab_spanner(\n    label = \"Absolute Frequency\",\n    columns = c(count_chatgpt, count_published, count_student)\n  ) |>\n  tab_spanner(\n    label = md(\"Relative Frequency (per 10^2^ words)\"),\n    columns = c(proportion_chatgpt, proportion_published, proportion_student)\n  ) |>\n  fmt_number(\n    columns = c(proportion_chatgpt, proportion_published, proportion_student),\n    decimals = 2\n  ) |>\n  tab_style(\n    style = list(\n      cell_text(align = \"right\")\n      ),\n    locations = cells_body(\n      columns = post_nom,\n    )\n  )\n```\n\n```{r warning=F, message=F}\ndf_plot <- stats_nps  %>% \n  filter(!is.na(n_pre) | !is.na(n_post)) %>%\n  group_by(author_type) %>%\n  summarize(np_len = mean(np_len),\n            pre_root = mean(n_pre),\n            post_root = mean(n_post)) %>%\n  mutate(author_type = c(\"ChatGPT\", \"Published\", \"Student\"))\n\ndf_plot <- within(df_plot, author_type <- factor(author_type, levels = c('Student', 'ChatGPT', 'Published')))\n\n```\n\n## Build plot\n\n```{r}\ntext_center <- grid::textGrob(\"Root noun\", gp= grid::gpar(fontsize=10, fontface=\"bold\"))\ntext_left <- grid::textGrob(\"Pre-nominal\", gp= grid::gpar(fontsize=10, fontface=\"bold\"))\ntext_right <- grid::textGrob(\"Post-nominal\", gp= grid::gpar(fontsize=10, fontface=\"bold\"))\n\ng.mid <- ggplot(df_plot, aes(x=1, y=author_type)) + \n  geom_text(aes(label = paste0(\"- \", author_type, \" -\")), lineheight = 1) +\n  ggtitle(\"\") +\n  ylab(NULL) +\n  annotation_custom(text_center, xmin=1, xmax=1, ymin=-0.5, ymax=1.5) +\n  coord_cartesian(clip = \"off\") + \n  theme(axis.title=element_blank(),\n        panel.grid=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank(),\n        panel.background=element_blank(),\n        axis.text.x=element_text(color=NA),\n        axis.ticks.x=element_line(color=NA),\n        plot.margin = unit(c(1, -1, 1.25, -1), \"lines\"))\n\ng1 <- ggplot(data = df_plot, aes(x = author_type, y = pre_root, fill = author_type)) +\n  geom_col(width = 0.5) + ggtitle(\"\") +\n  scale_fill_manual(values = c(\n    \"Published\" = viridis::viridis(3)[2], \n    \"ChatGPT\"   = viridis::viridis(3)[1], \n    \"Student\"   = viridis::viridis(3)[3])\n    ) +\n  geom_text(\n    aes(y = .55, label = paste0(\"← \", round(pre_root, 2), \" words\")),\n    nudge_x = .5\n  ) +\n  theme(axis.title.x = element_blank(), \n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(), \n        axis.ticks.y = element_blank(), \n        axis.text.x = element_blank(), \n        legend.position = \"none\",\n        axis.ticks.x = element_blank(), \n        panel.background = element_blank(),\n        plot.margin = unit(c(1, -1, 2, 0), \"lines\")) +\n  annotation_custom(text_left, xmin=-0.5, xmax=1.5, ymin=-0.5, ymax=-0.5) +\n  scale_y_reverse() + \n  coord_flip()\n\ng2 <- ggplot(data = df_plot, aes(x = author_type, y = post_root, fill = author_type)) +\n  xlab(NULL) +\n  geom_col(width = 0.5) + ggtitle(\"\") +\n  scale_fill_manual(values = c(\n    \"Published\" = viridis::viridis(3)[2], \n    \"ChatGPT\"   = viridis::viridis(3)[1], \n    \"Student\"   = viridis::viridis(3)[3])\n  ) +\n  geom_text(\n    aes(y = .5, label = paste0(round(post_root, 2), \" words →\")),\n    nudge_x = .5\n  ) +\n  theme(axis.title.x = element_blank(), \n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(), \n        axis.ticks.y = element_blank(),\n        axis.text.x = element_blank(), \n        axis.ticks.x = element_blank(), \n        legend.position = \"none\",\n        panel.background = element_blank(),\n        plot.margin = unit(c(1, 0, 2, -1), \"lines\")) +\n  annotation_custom(text_right, xmin=-0.5, xmax=1.5, ymin=0.5, ymax=0.5) +\n  coord_flip()\n\n\ngg1 <- ggplot_gtable(ggplot_build(g1))\ngg2 <- ggplot_gtable(ggplot_build(g2))\ngg.mid <- ggplot_gtable(ggplot_build(g.mid))\n```\n\n## Plot\n\n```{r echo=F, warning=F, message=F}\n#| label: fig-nps\n#| fig-cap: \"Caption describing plot.\"\n#| fig-height: 3\n\ngridExtra::grid.arrange(gg1, gg.mid, gg2, ncol=3, widths=c(2.2/10, 1.7/10, 6.1/10))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":true,"output-file":"jsdse_chatgpt.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","editor":"visual","title":"Student Writing and Expertise in the Age of AI","author":"David Brown & Alex Reinhart"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}