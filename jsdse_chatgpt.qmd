---
title: "Student Writing and Expertise in the Age of AI"
author: "David Brown & Alex Reinhart"
format:
  html: 
    number-sections: true
---

# Background & data

This notebook includes the code and data that were used to produce the results of our study, which was submitted to the Journal of Statistics and Data Science Education.

Note that the complete raw text data is not being made available to protect the privacy of the student writers. However, samples from the published and ChatGPT-generated data are included in order to demonstrate the processing pipeline.

### Load packages

```{r message=F, warning=F}
library(tidyverse)
library(gt)
```

### Load data

```{r warning=FALSE, message=FALSE}
load("data/chatgpt_data.rda")
```

### Create a composition table

```{r}
corpus_comp <- stats_freq %>% 
  pivot_longer(cols = AF_chatgpt:AF_student, names_to = "Author_Type", values_to = "AF") %>%
  group_by(Author_Type) %>%
  summarize(Texts = 100,
            Tokens = sum(AF)) %>%
  mutate(Author_Type = c("ChatGPT", "Published", "Student"))
```

Say stuff...

```{r echo=F, warning=F, message=F}
#| label: tbl-corpus
#| tbl-cap: "Composition of corpus."

corpus_comp |> 
  gt() |>
  fmt_integer() |>
  cols_label(
    Author_Type = md("**Author Type**"),
    Texts = md("**Texts**"),
    Tokens = md("**Tokens**")
  ) |>
  grand_summary_rows(
    columns = c(Texts, Tokens),
    fns = list(
      Total ~ sum(.)
    ) ,
    fmt = ~ fmt_integer(.)
    )
```

# Linear discriminant analysis (LDA)

Say stuff....

```{r message=F, warning=FALSE}
# Scale variables
biber_scaled <- stats_biber %>%
  select(-doc_id) %>%
  mutate_if(is.numeric, scale)
  
stats_lda <- MASS::lda(Group ~ ., biber_scaled)
```

Function for plotting...

```{r message=F, warning=FALSE}
lda_scatter <- function(lda){
  
  var_ex <- (lda$svd)^2/sum(lda$svd^2) * 100
  
  per_ex_1 <- paste0("(", round(var_ex[1], 2), "%)")
  per_ex_2 <- paste0("(", round(var_ex[2], 2), "%)")
  
  scores <- predict(lda) %>%
    data.frame() %>%
    select(class, x.LD1, x.LD2)
  
  max_x <- scores[,2] %>% abs() %>% max() %>% ceiling()+.5
  max_y <- scores[,3] %>% abs() %>% max() %>% ceiling()+.5
  
  p1 <- ggplot() +
    geom_hline(yintercept = 0, linewidth = .25) +
    geom_vline(xintercept = 0, linewidth = .25) +
    geom_point(data = scores, aes(x = x.LD1, y = x.LD2, fill = class),
               shape = 21, size = 1.5) +
    viridis::scale_fill_viridis(discrete = T) +
    xlab(paste0("LD1", " ", per_ex_1)) +
    ylab(paste0("LD2", " ", per_ex_2)) +
    ylim(-max_y, max_y) +
    xlim(-max_x, max_x) +
    theme_linedraw() +
    theme(panel.grid.minor.x = element_blank()) +
    theme(panel.grid.minor.y = element_blank()) +
    theme(panel.grid.major.x = element_blank()) +
    theme(panel.grid.major.y = element_blank()) +
    theme(legend.position = "none")
  return(p1)
}
```

```{r echo=F}
#| label: fig-lda
#| fig-cap: "Caption describing plot."

lda_scatter(stats_lda)
```

# Multiple univariate regression

Say stuff...

```{r message=F, warning=FALSE}
z_means <- stats_biber %>%
  select(-doc_id) %>%
  mutate_if(is.numeric, scale) %>%
  pivot_longer(!Group, names_to = "variable", values_to = "z_score") %>%
  group_by(Group, variable) %>%
  summarize(mean_z = mean(z_score)) %>%
  pivot_wider(names_from = Group, values_from = mean_z)

lm_biber <- stats_biber %>%
  select(-doc_id) %>%
  pivot_longer(!Group, names_to = "variable", values_to = "value") %>%
  group_by(variable) %>%
  arrange(.by_group = TRUE) %>% 
  nest() %>%
  mutate(models = map(data, ~ lm(value ~ Group, data = .)),
         glance = map(models, broom::glance)) %>%
  unnest(glance) %>%
  select(-c(data, models)) %>%
  left_join(z_means) %>%
  select(variable, ChatGPT:Student, everything())
```

```{r message=FALSE}
ld1_tbl <- lm_biber %>%
  select(ChatGPT:r.squared, p.value) %>%
  mutate(direction = ifelse(ChatGPT > 0 & Published < 0 & Student <0, "machine", NA)) %>%
  mutate(direction = ifelse(ChatGPT < 0 & Published > 0 & Student > 0, "human", direction)) %>%
  filter(!is.na(direction)) %>%
  filter(r.squared > 0.1) %>%
  arrange(direction, -r.squared)

ld2_tbl <- lm_biber %>%
  select(ChatGPT:r.squared, p.value) %>%
  mutate(direction = ifelse(Published > 0 & ChatGPT < 0 & Student <0, "expert", NA)) %>%
  mutate(direction = ifelse(Student > 0 & ChatGPT < 0 & Published < 0, "novice", direction)) %>%
  filter(!is.na(direction)) %>%
  filter(r.squared > 0.1) %>%
  arrange(direction, -r.squared)
```

```{r echo=F, warning=F, message=F}
#| label: tbl-ld1
#| tbl-cap: "Caption describing table."

ld1_tbl |> 
  mutate(direction = paste0("Features indicating ", direction, "-generated writing")) |>
  mutate(variable = str_remove(variable, "f_\\d+_")) |>
  mutate(variable = str_replace_all(variable, "_", " ")) |>
  gt(groupname_col = 'direction') |>
  cols_label(
    variable = md(""),
    ChatGPT = md("**ChatGPT<br>n:100**"),
    Published = md("**Published<br>n:100**"),
    Student = md("**Student<br>n:100**"),
    r.squared = md("***R*^2^**"),
    p.value = md("***p*-value**")
  ) |> 
  fmt_number(
    columns = everything(),
    decimals = 2
  )  |> 
  data_color(
    columns = c(ChatGPT:Student),
    colors = scales::col_numeric(
      palette = c(
        "#FF6666", "white", "#336699"),
      domain = c(pmin(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student), 
                 0, 
                 pmax(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student)))
  ) |>
  tab_style(
    style = list(
      cell_text(style = "italic",
                align = "right")
      ),
    locations = cells_body(
      columns = variable,
    )
  )
```

```{r echo=F, warning=F, message=F}
#| label: tbl-ld2
#| tbl-cap: "Caption describing table."

ld2_tbl |> 
  mutate(direction = paste0("Features indicating ", direction, " writing")) |>
  mutate(variable = str_remove(variable, "f_\\d+_")) |>
  mutate(variable = str_replace_all(variable, "_", " ")) |>
  gt(groupname_col = 'direction') |>
  cols_label(
    variable = md(""),
    ChatGPT = md("**ChatGPT<br>n:100**"),
    Published = md("**Published<br>n:100**"),
    Student = md("**Student<br>n:100**"),
    r.squared = md("***R*^2^**"),
    p.value = md("***p*-value**")
  ) |> 
  fmt_number(
    columns = everything(),
    decimals = 2
  )  |> 
  data_color(
    columns = c(ChatGPT:Student),
    colors = scales::col_numeric(
      palette = c(
        "#FF6666", "white", "#336699"),
      domain = c(-1, 0, 1))
  ) |>
  tab_style(
    style = list(
      cell_text(style = "italic",
                align = "right")
      ),
    locations = cells_body(
      columns = variable,
    )
  )
```

# Modal verb frequencies

Say stuff...

```{r echo=F, warning=F, message=F}
stats_freq |> 
  filter(tag == "md") |>
  select(-tag) |>
  mutate(modal_type = ifelse(str_detect(token, "will|would|'ll"), "Prediction", NA)) |>
  mutate(modal_type = ifelse(str_detect(token, "can|may|could|might"), "Possiblity", modal_type)) |>
  mutate(modal_type = ifelse(is.na(modal_type), "Necessity", modal_type)) |>
  gt(groupname_col = 'modal_type') |>
  cols_label(
    token = md("Modal verb"),
    AF_chatgpt = md("ChatGPT"),
    AF_published = md("Published"),
    AF_student = md("Student"),
    RF_chatgpt = md("ChatGPT"),
    RF_published = md("Published"),
    RF_student = md("Student"),
  ) |> 
  tab_spanner(
    label = "Absolute Frequency",
    columns = c(AF_chatgpt, AF_published, AF_student)
  ) |>
  tab_spanner(
    label = md("Relative Frequency (per 10^5^ words)"),
    columns = c(RF_chatgpt, RF_published, RF_student)
  ) |>
  fmt_number(
    columns = c(RF_chatgpt, RF_published, RF_student),
    decimals = 2
  ) |>
  tab_style(
    style = list(
      cell_text(style = "italic",
                align = "right")
      ),
    locations = cells_body(
      columns = token,
    )
  )
```

# Noun phrases

Say stuff...
