---
title: "Student Writing and Expertise in the Age of AI"
author: "David Brown & Alex Reinhart"
format:
  html: 
    number-sections: true
---

# Background & data

This notebook includes the code and data that were used to produce the results of our study, which was submitted to the Journal of Statistics and Data Science Education.

```         
:::{.callout-note}
Note that the complete raw text data is not being made available to protect the privacy of the student writers. However, samples from the published and ChatGPT-generated data are included in order to demonstrate the processing pipeline.
```

## Load packages

```{r message=F, warning=F}
library(tidyverse)
library(gt)
```

## Load data

```{r warning=FALSE, message=FALSE}
load("data/chatgpt_data.rda")
```

## Create a composition table

```{r}
corpus_comp <- stats_freq %>% 
  pivot_longer(cols = AF_chatgpt:AF_student, names_to = "Author_Type", values_to = "AF") %>%
  group_by(Author_Type) %>%
  summarize(Texts = 100,
            Tokens = sum(AF)) %>%
  mutate(Author_Type = c("ChatGPT", "Published", "Student"))
```

Say stuff...

```{r echo=F, warning=F, message=F}
#| label: tbl-corpus
#| tbl-cap: "Composition of corpus."

corpus_comp |> 
  gt() |>
  fmt_integer() |>
  cols_label(
    Author_Type = md("**Author Type**"),
    Texts = md("**Texts**"),
    Tokens = md("**Tokens**")
  ) |>
  grand_summary_rows(
    columns = c(Texts, Tokens),
    fns = list(
      Total ~ sum(.)
    ) ,
    fmt = ~ fmt_integer(.)
    )
```

# Linear discriminant analysis (LDA)

Say stuff....

```{r message=F, warning=FALSE}
# Scale variables
biber_scaled <- stats_biber %>%
  select(-doc_id) %>%
  mutate_if(is.numeric, scale)
  
stats_lda <- MASS::lda(Group ~ ., biber_scaled)
```

Function for plotting...

```{r message=F, warning=FALSE}
lda_scatter <- function(lda){
  
  var_ex <- (lda$svd)^2/sum(lda$svd^2) * 100
  
  per_ex_1 <- paste0("(", round(var_ex[1], 2), "%)")
  per_ex_2 <- paste0("(", round(var_ex[2], 2), "%)")
  
  scores <- predict(lda) %>%
    data.frame() %>%
    select(class, x.LD1, x.LD2)
  
  max_x <- scores[,2] %>% abs() %>% max() %>% ceiling()+.5
  max_y <- scores[,3] %>% abs() %>% max() %>% ceiling()+.5
  
  p1 <- ggplot() +
    geom_hline(yintercept = 0, linewidth = .25) +
    geom_vline(xintercept = 0, linewidth = .25) +
    geom_point(data = scores, aes(x = x.LD1, y = x.LD2, fill = class),
               shape = 21, size = 1.5) +
    viridis::scale_fill_viridis(discrete = T) +
    xlab(paste0("LD1", " ", per_ex_1)) +
    ylab(paste0("LD2", " ", per_ex_2)) +
    ylim(-max_y, max_y) +
    xlim(-max_x, max_x) +
    theme_linedraw() +
    theme(panel.grid.minor.x = element_blank()) +
    theme(panel.grid.minor.y = element_blank()) +
    theme(panel.grid.major.x = element_blank()) +
    theme(panel.grid.major.y = element_blank()) +
    theme(legend.position = "none")
  return(p1)
}
```

```{r echo=F}
#| label: fig-lda
#| fig-cap: "Caption describing plot."

p1 <- lda_scatter(stats_lda)

p1 +
  annotate("text", x = -9.25, y = 6, label = "↑\nNovice", size = 3.5) +
  annotate("text", x = 8, y = 6, label = "Human-generated →", size = 3.5) +
  annotate("text", x = 9.25, y = -6, label = "Expert\n↓", size = 3.5) +
  annotate("text", x = -8, y = -6, label = "← Machine-generated", size = 3.5) +
  annotate("text", x = 6, y = 3.75, label = "Student", size = 3.5) +
  annotate("text", x = 6, y = -3.75, label = "Published", size = 3.5) +
  annotate("text", x = -6, y = -2.5, label = "ChatGPT", size = 3.5)
```

# Multiple univariate regression

Say stuff...

```{r message=F, warning=FALSE}
z_means <- stats_biber %>%
  select(-doc_id) %>%
  mutate_if(is.numeric, scale) %>%
  pivot_longer(!Group, names_to = "variable", values_to = "z_score") %>%
  group_by(Group, variable) %>%
  summarize(mean_z = mean(z_score)) %>%
  pivot_wider(names_from = Group, values_from = mean_z)

lm_biber <- stats_biber %>%
  select(-doc_id) %>%
  pivot_longer(!Group, names_to = "variable", values_to = "value") %>%
  group_by(variable) %>%
  arrange(.by_group = TRUE) %>% 
  nest() %>%
  mutate(models = map(data, ~ lm(value ~ Group, data = .)),
         glance = map(models, broom::glance)) %>%
  unnest(glance) %>%
  select(-c(data, models)) %>%
  left_join(z_means) %>%
  select(variable, ChatGPT:Student, everything())
```

```{r message=FALSE}
ld1_tbl <- lm_biber %>%
  select(ChatGPT:r.squared, p.value) %>%
  mutate(direction = ifelse(ChatGPT > 0 & Published < 0 & Student <0, "machine", NA)) %>%
  mutate(direction = ifelse(ChatGPT < 0 & Published > 0 & Student > 0, "human", direction)) %>%
  filter(!is.na(direction)) %>%
  filter(r.squared > 0.1) %>%
  arrange(direction, -r.squared)

ld2_tbl <- lm_biber %>%
  select(ChatGPT:r.squared, p.value) %>%
  mutate(direction = ifelse(Published > 0 & ChatGPT < 0 & Student <0, "expert", NA)) %>%
  mutate(direction = ifelse(Student > 0 & ChatGPT < 0 & Published < 0, "novice", direction)) %>%
  filter(!is.na(direction)) %>%
  filter(r.squared > 0.1) %>%
  arrange(desc(direction), -r.squared)
```

```{r echo=F, warning=F, message=F}
#| label: tbl-ld1
#| tbl-cap: "Caption describing table."

ld1_tbl |> 
  mutate(direction = paste0("Features indicating ", direction, "-generated writing")) |>
  mutate(variable = str_remove(variable, "f_\\d+_")) |>
  mutate(variable = str_replace_all(variable, "_", " ")) |>
  gt(groupname_col = 'direction') |>
  cols_label(
    variable = md(""),
    ChatGPT = md("**ChatGPT<br>n:100**"),
    Published = md("**Published<br>n:100**"),
    Student = md("**Student<br>n:100**"),
    r.squared = md("***R*^2^**"),
    p.value = md("***p*-value**")
  ) |> 
  fmt_number(
    columns = everything(),
    decimals = 2
  )  |> 
  data_color(
    columns = c(ChatGPT:Student),
    colors = scales::col_numeric(
      palette = c(
        "#FF6666", "white", "#336699"),
      domain = c(pmin(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student), 
                 0, 
                 pmax(ld1_tbl$ChatGPT, ld1_tbl$Published, ld1_tbl$Student)))
  ) |>
  tab_style(
    style = list(
      cell_text(style = "italic",
                align = "right")
      ),
    locations = cells_body(
      columns = variable,
    )
  )
```

```{r echo=F, warning=F, message=F}
#| label: tbl-ld2
#| tbl-cap: "Caption describing table."

ld2_tbl |> 
  mutate(direction = paste0("Features indicating ", direction, " writing")) |>
  mutate(variable = str_remove(variable, "f_\\d+_")) |>
  mutate(variable = str_replace_all(variable, "_", " ")) |>
  gt(groupname_col = 'direction') |>
  cols_label(
    variable = md(""),
    ChatGPT = md("**ChatGPT<br>n:100**"),
    Published = md("**Published<br>n:100**"),
    Student = md("**Student<br>n:100**"),
    r.squared = md("***R*^2^**"),
    p.value = md("***p*-value**")
  ) |> 
  fmt_number(
    columns = everything(),
    decimals = 2
  )  |> 
  data_color(
    columns = c(ChatGPT:Student),
    colors = scales::col_numeric(
      palette = c(
        "#FF6666", "white", "#336699"),
      domain = c(-1, 0, 1))
  ) |>
  tab_style(
    style = list(
      cell_text(style = "italic",
                align = "right")
      ),
    locations = cells_body(
      columns = variable,
    )
  )
```

# Modal verb frequencies

Say stuff...

```{r echo=F, warning=F, message=F}
#| label: tbl-modals
#| tbl-cap: "Caption describing table."

stats_freq |> 
  filter(tag == "md") |>
  select(-tag) |>
  mutate(modal_type = ifelse(str_detect(token, "will|would|'ll"), "Prediction", NA)) |>
  mutate(modal_type = ifelse(str_detect(token, "can|may|could|might"), "Possiblity", modal_type)) |>
  mutate(modal_type = ifelse(is.na(modal_type), "Necessity", modal_type)) |>
  gt(groupname_col = 'modal_type') |>
  cols_label(
    token = md("Modal verb"),
    AF_chatgpt = md("ChatGPT"),
    AF_published = md("Published"),
    AF_student = md("Student"),
    RF_chatgpt = md("ChatGPT"),
    RF_published = md("Published"),
    RF_student = md("Student"),
  ) |> 
  tab_spanner(
    label = "Absolute Frequency",
    columns = c(AF_chatgpt, AF_published, AF_student)
  ) |>
  tab_spanner(
    label = md("Relative Frequency (per 10^5^ words)"),
    columns = c(RF_chatgpt, RF_published, RF_student)
  ) |>
  fmt_number(
    columns = c(RF_chatgpt, RF_published, RF_student),
    decimals = 2
  ) |>
  tab_style(
    style = list(
      cell_text(style = "italic",
                align = "right")
      ),
    locations = cells_body(
      columns = token,
    )
  )
```

# Noun phrases

Say stuff...

```{r warning=F, message=F}
df_plot <- stats_nps  %>% 
  filter(!is.na(n_pre) | !is.na(n_post)) %>%
  group_by(author_type) %>%
  summarize(np_len = mean(np_len),
            pre_root = mean(n_pre),
            post_root = mean(n_post)) %>%
  mutate(author_type = c("ChatGPT", "Published", "Student"))

df_plot <- within(df_plot, author_type <- factor(author_type, levels = c('Student', 'ChatGPT', 'Published')))

```

## Build plot

```{r}
text_center <- grid::textGrob("Root noun", gp= grid::gpar(fontsize=10, fontface="bold"))
text_left <- grid::textGrob("Pre-nominal", gp= grid::gpar(fontsize=10, fontface="bold"))
text_right <- grid::textGrob("Post-nominal", gp= grid::gpar(fontsize=10, fontface="bold"))

g.mid <- ggplot(df_plot, aes(x=1, y=author_type)) + 
  geom_text(aes(label = paste0("- ", author_type, " -")), lineheight = 1) +
  ggtitle("") +
  ylab(NULL) +
  annotation_custom(text_center, xmin=1, xmax=1, ymin=-0.5, ymax=1.5) +
  coord_cartesian(clip = "off") + 
  theme(axis.title=element_blank(),
        panel.grid=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        panel.background=element_blank(),
        axis.text.x=element_text(color=NA),
        axis.ticks.x=element_line(color=NA),
        plot.margin = unit(c(1, -1, 1.25, -1), "lines"))

g1 <- ggplot(data = df_plot, aes(x = author_type, y = pre_root, fill = author_type)) +
  geom_col(width = 0.5) + ggtitle("") +
  scale_fill_manual(values = c(
    "Published" = viridis::viridis(3)[2], 
    "ChatGPT"   = viridis::viridis(3)[1], 
    "Student"   = viridis::viridis(3)[3])
    ) +
  geom_text(
    aes(y = .55, label = paste0("← ", round(pre_root, 2), " words")),
    nudge_x = .5
  ) +
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(), 
        axis.text.y = element_blank(), 
        axis.ticks.y = element_blank(), 
        axis.text.x = element_blank(), 
        legend.position = "none",
        axis.ticks.x = element_blank(), 
        panel.background = element_blank(),
        plot.margin = unit(c(1, -1, 2, 0), "lines")) +
  annotation_custom(text_left, xmin=-0.5, xmax=1.5, ymin=-0.5, ymax=-0.5) +
  scale_y_reverse() + 
  coord_flip()

g2 <- ggplot(data = df_plot, aes(x = author_type, y = post_root, fill = author_type)) +
  xlab(NULL) +
  geom_col(width = 0.5) + ggtitle("") +
  scale_fill_manual(values = c(
    "Published" = viridis::viridis(3)[2], 
    "ChatGPT"   = viridis::viridis(3)[1], 
    "Student"   = viridis::viridis(3)[3])
  ) +
  geom_text(
    aes(y = .5, label = paste0(round(post_root, 2), " words →")),
    nudge_x = .5
  ) +
  theme(axis.title.x = element_blank(), 
        axis.title.y = element_blank(), 
        axis.text.y = element_blank(), 
        axis.ticks.y = element_blank(),
        axis.text.x = element_blank(), 
        axis.ticks.x = element_blank(), 
        legend.position = "none",
        panel.background = element_blank(),
        plot.margin = unit(c(1, 0, 2, -1), "lines")) +
  annotation_custom(text_right, xmin=-0.5, xmax=1.5, ymin=0.5, ymax=0.5) +
  coord_flip()


gg1 <- ggplot_gtable(ggplot_build(g1))
gg2 <- ggplot_gtable(ggplot_build(g2))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
```

## Plot

```{r echo=F, warning=F, message=F}
#| label: fig-nps
#| fig-cap: "Caption describing plot."
#| fig-height: 3

gridExtra::grid.arrange(gg1, gg.mid, gg2, ncol=3, widths=c(2.2/10, 1.7/10, 6.1/10))
```
